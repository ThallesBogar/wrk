:-dynamic
      rpath/2.      % A reversed path

edge(a,b,7).
edge(a,c,9).
edge(b,c,10).
edge(b,d,15).
edge(c,d,11).
edge(d,e,6).
edge(a,f,14).
edge(c,f,2).
edge(e,f,9).

path(From,To,Dist) :- edge(To,From,Dist).
path(From,To,Dist) :- edge(From,To,Dist).

shorterPath([H|Path], Dist) :-		       % path < stored path? replace it
    rpath([H|_], D), !, Dist < D,          % match target node [H|_]
    retract(rpath([H|_],_)),
    write([H|Path]), write(' is closer than '), write([H|T]), nl,
    assert(rpath([H|Path], Dist)).
shorterPath(Path, Dist) :-		       % Otherwise store a new path
    write('New path: '), write( [Path]), nl,
    assert(rpath(Path,Dist)).

memberchk(T, [T|_]) :- !.
memberchk(T, [_|Resto]) :- memberchk(T, Resto).

traverse(From, Path, Dist) :-         % traverse all reachable nodes
    path(From, T, D),		    % For each neighbor
    \+ memberchk(T, Path),	    %	which is unvisited
    shorterPath([T,From|Path], Dist+D), %	Update shortest path
    traverse(T,[From|Path],Dist+D).	    %	Then traverse the neighbor

traverse(From) :-
    retractall(rpath(_,_)),           % Remove solutions
    traverse(From,[],0).              % Traverse from origin
traverse(_).

rv([], R, R) :- !.
rv([X|Xs], Rs, R) :- rv(Xs, [X|Rs], R).

rev(Xs, Rs) :- rv(Xs, [], Rs).

go(From, To) :-
    traverse(From),                   % Find all distances
    rpath([To|RPath], Dist),         % If the target can be reached
    rev([To|RPath], Path),      % Report the path and distance
    Distance is Dist, !,
    write('Shortest path is '),
    write(Path), nl, write(Dist), nl, write(Distance).

go(From, To) :-
    write('There is no route from '), write(From),
    write(' to '), write(To), nl.

